model Full_Susp
  import g = Modelica.Constants.g_n;
  import Modelica.Units.SI.*;
  import FVM.variables.*;
  parameter Force sprung_fz = m_sprung * g "[N] Force equivalent to sprung chassis weight";
  parameter Distance b = l - a "[m] Distance from CG to rear axle in X-axis";
  AngularAcceleration alphax(start = 0) "[rad/s2] Angular acceleration in X-axis (roll) of sprung chassis";
  AngularAcceleration alphay(start = 0) "[rad/s2] Angular acceleration in Y-axis (pitch) of sprung chassis";
  AngularVelocity rx "[rad/s] Angular velocity in X-axis (roll) of sprung chassis";
  AngularVelocity ry "[rad/s] Angular velocity in Y-axis (pitch) of sprung chassis";
  Angle roll "[rad] Angular displacement in X-axis of sprung chassis";
  Angle pitch "[rad] Angular displacement in Y-axis of sprung chassis";
  Acceleration az(start = g) "[m/s2] Acceleration in Z-axis of CG (heave)";
  Velocity vz "[m/s] Velocity in Z-axis of CG (heave)";
  Position hCG "[m] Height (Z-axis position) of CG (heave)";
  Acceleration ax(start = 0) "[m/s2] Acceleration in X-axis of CG (forward motion)";
  Acceleration ay(start = 0) "[m/s2] Acceleration in Y-axis of CG (turning motion)";
  //Full suspension assemblies connection: 4x quarter_susp labeled as FL (Front Left), FR (Front Right), RL (Rear Left), RR (Rear Right)
  FVM.Quarter_Susp FL;
  FVM.Quarter_Susp FR;
  FVM.Quarter_Susp RL;
  FVM.Quarter_Susp RR;
initial equation
  rx = 0;
  ry = 0;
  roll = 0;
  pitch = 0;
  vz = 0;
  FL.spring.c = c_f;
  FL.spring.s_rel0 = s_rel0_c_f;
  FL.damper.d = d_f;
  FL.damper.s_nominal = s_rel0_d_f;
  FL.unsprung_mass.m = m_unsprung_f;
  FL.tire.c = c_tire;
  FL.tire.s_rel0 = s_rel0_tire;
  FL.tire_damp.d = d_tire;
  FL.tire_damp.s_nominal = s_rel0_tire;
  FR.spring.c = c_f;
  FR.spring.s_rel0 = s_rel0_c_f;
  FR.damper.d = d_f;
  FR.damper.s_nominal = s_rel0_d_f;
  FR.unsprung_mass.m = m_unsprung_f;
  FR.tire.c = c_tire;
  FR.tire.s_rel0 = s_rel0_tire;
  FR.tire_damp.d = d_tire;
  FR.tire_damp.s_nominal = s_rel0_tire;
  RL.spring.c = c_r;
  RL.spring.s_rel0 = s_rel0_c_r;
  RL.damper.d = d_r;
  RL.damper.s_nominal = s_rel0_d_r;
  RL.unsprung_mass.m = m_unsprung_r;
  RL.tire.c = c_tire;
  RL.tire.s_rel0 = s_rel0_tire;
  RL.tire_damp.d = d_tire;
  RL.tire_damp.s_nominal = s_rel0_tire;
  RR.spring.c = c_r;
  RR.spring.s_rel0 = s_rel0_c_r;
  RR.damper.d = d_r;
  RR.damper.s_nominal = s_rel0_d_r;
  RR.unsprung_mass.m = m_unsprung_r;
  RR.tire.c = c_tire;
  RR.tire.s_rel0 = s_rel0_tire;
  RR.tire_damp.d = d_tire;
  RR.tire_damp.s_nominal = s_rel0_tire;
  FL.spring.s_rel = FL.spring.s_rel0;
  FR.spring.s_rel = FR.spring.s_rel0;
  RL.spring.s_rel = RL.spring.s_rel0;
  RR.spring.s_rel = RR.spring.s_rel0;
equation
//Pitch & roll angle definition
  ((FR.spring.flange_a.s + FL.spring.flange_a.s) / 2 - (RL.spring.flange_a.s + RR.spring.flange_a.s) / 2) / l = -sin(pitch);
  ((FL.spring.flange_a.s + RL.spring.flange_a.s) / 2 - (FR.spring.flange_a.s + RR.spring.flange_a.s) / 2) / ((tf + tr) / 2) = -sin(roll);
//Height of CG definition
  hCG = (FL.spring.flange_a.s + FR.spring.flange_a.s) / 2 - a * sin(pitch) - hhCG * cos(roll) * cos(pitch);
//Geometric constraint for ensuring rigidity of chassis (avoids impossible situations in real world)
  FL.spring.flange_a.s + (RR.spring.flange_a.s - FL.spring.flange_a.s) * tf / tr = FR.spring.flange_a.s + (RL.spring.flange_a.s - FR.spring.flange_a.s) * tf / tr;
//Basic derivatives of rotation and traslational movements
  der(roll) = rx;
  der(pitch) = ry;
  der(rx) = alphax;
  der(ry) = alphay;
  der(hCG) = vz;
  der(vz) = az;
//sum(F) = m * a (Z-axis) Includes 4 forces coming from from suspension and sprung chassis weight
  (-FL.fz.f) - FR.fz.f - RL.fz.f - RR.fz.f + sprung_fz = m_sprung * az;
//sum(M) = I * alpha (X- and Y-axis) // Chosen equilibrium point: vertical projection of CG at front axle centerpoint horizontal plane.
//Y-axis
  sprung_fz * (a * cos(pitch) + hhCG * sin(pitch) * cos(roll)) - (l * cos(pitch) + tr / 2 * sin(roll) * sin(pitch)) * RL.fz.f - (l * cos(pitch) - tr / 2 * sin(roll) * sin(pitch)) * RR.fz.f - tf / 2 * sin(roll) * sin(pitch) * FL.fz.f + tf / 2 * sin(roll) * sin(pitch) * FR.fz.f + (l * sin(pitch) - tr / 2 * sin(roll) * cos(pitch)) * RL.fx + (l * sin(pitch) + tr / 2 * sin(roll) * cos(pitch)) * RR.fx - tf / 2 * sin(roll) * cos(pitch) * FL.fx + tf / 2 * sin(roll) * cos(pitch) * FR.fx = Iy * alphay;
//X-axis
  sprung_fz * hhCG * sin(roll) * cos(pitch) + tr / 2 * cos(roll) * cos(pitch) * RL.fz.f - tr / 2 * cos(roll) * cos(pitch) * RR.fz.f + tf / 2 * cos(roll) * cos(pitch) * FL.fz.f - tf / 2 * cos(roll) * cos(pitch) * FR.fz.f + tr / 2 * sin(roll) * RL.fy - tr / 2 * sin(roll) * RR.fy + tf / 2 * sin(roll) * FL.fy - tf / 2 * sin(roll) * FR.fy = Ix * alphax;
end Full_Susp;
